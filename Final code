import tkinter as tk
from tkinter import messagebox
import pickle
import os

#Classes

class User:
    def __init__(self, user_id, name, email):
        self.user_id = user_id
        self.name = name
        self.email = email
        self.purchase_history = []

class Admin:
    def __init__(self, admin_id, name):
        self.admin_id = admin_id
        self.name = name

class Ticket:
    def __init__(self, ticket_id, ticket_type, price):
        self.ticket_id = ticket_id
        self.ticket_type = ticket_type
        self.price = price

class SingleRacePass(Ticket):
    def __init__(self, ticket_id, price, race_date):
        super().__init__(ticket_id, "SingleRacePass", price)
        self.race_date = race_date

class WeekendPackage(Ticket):
    def __init__(self, ticket_id, price, race_dates):
        super().__init__(ticket_id, "WeekendPackage", price)
        self.race_dates = race_dates

class SeasonMembership(Ticket):
    def __init__(self, ticket_id, price, season_year):
        super().__init__(ticket_id, "SeasonMembership", price)
        self.season_year = season_year

class GroupDiscount(Ticket):
    def __init__(self, ticket_id, price, group_size):
        super().__init__(ticket_id, "GroupDiscount", price)
        self.group_size = group_size

class Payment:
    def __init__(self, payment_id, method, amount):
        self.payment_id = payment_id
        self.method = method
        self.amount = amount

    def process(self):
        return True  # fake success

#Pickle Save/Load

def save_users(users):
    with open("users.pkl", "wb") as f:
        pickle.dump(users, f)

def load_users():
    if os.path.exists("users.pkl"):
        with open("users.pkl", "rb") as f:
            return pickle.load(f)
    return []

def save_tickets(tickets):
    with open("tickets.pkl", "wb") as f:
        pickle.dump(tickets, f)

def load_tickets():
    if os.path.exists("tickets.pkl"):
        with open("tickets.pkl", "rb") as f:
            return pickle.load(f)
    return []

#Ticket System

class TicketBookingSystem:
    def __init__(self):
        self.registered_users = load_users()
        self.available_tickets = load_tickets()
        if not self.available_tickets:
            self.load_sample_tickets()

    def register_user(self, user):
        self.registered_users.append(user)
        save_users(self.registered_users)

    def book_ticket(self, user, ticket_id):
        for ticket in self.available_tickets:
            if ticket.ticket_id == ticket_id:
                user.purchase_history.append(ticket)
                self.available_tickets.remove(ticket)
                save_users(self.registered_users)
                save_tickets(self.available_tickets)
                return ticket
        return None

    def load_sample_tickets(self):
        self.available_tickets = [
            SingleRacePass(1, 100.0, "2025-10-01"),
            WeekendPackage(2, 250.0, ["2025-10-01", "2025-10-02"]),
            SeasonMembership(3, 500.0, 2025),
            GroupDiscount(4, 80.0, 5)
        ]
        save_tickets(self.available_tickets)

#Admin Dashboard

class AdminDashboard:
    def __init__(self, system):
        self.system = system

    def show_ticket_stats(self):
        total_left = len(self.system.available_tickets)
        sold = sum(len(u.purchase_history) for u in self.system.registered_users)
        messagebox.showinfo("Admin Stats", f"Tickets Sold: {sold}\nTickets Left: {total_left}")

#GUI

class TicketApp:
    def __init__(self, root):
        self.system = TicketBookingSystem()
        self.root = root
        self.root.title("Grand Prix Booking")

        self.name_var = tk.StringVar()
        self.email_var = tk.StringVar()
        self.ticket_id_var = tk.StringVar()
        self.payment_method_var = tk.StringVar()
        self.current_user = None

        # layout
        tk.Label(root, text="Name").grid(row=0, column=0)
        tk.Entry(root, textvariable=self.name_var).grid(row=0, column=1)

        tk.Label(root, text="Email").grid(row=1, column=0)
        tk.Entry(root, textvariable=self.email_var).grid(row=1, column=1)

        tk.Button(root, text="Create Account", command=self.create_user).grid(row=2, column=0, columnspan=2)

        tk.Label(root, text="Ticket ID to Buy").grid(row=3, column=0)
        tk.Entry(root, textvariable=self.ticket_id_var).grid(row=3, column=1)

        tk.Label(root, text="Payment Method").grid(row=4, column=0)
        tk.Entry(root, textvariable=self.payment_method_var).grid(row=4, column=1)

        tk.Button(root, text="Book Ticket", command=self.book_ticket).grid(row=5, column=0, columnspan=2)
        tk.Button(root, text="Admin Dashboard", command=self.show_admin).grid(row=6, column=0, columnspan=2)

    def create_user(self):
        name = self.name_var.get()
        email = self.email_var.get()
        if name == "" or email == "":
            messagebox.showerror("Error", "Fill all fields")
            return
        user = User(user_id=len(self.system.registered_users)+1, name=name, email=email)
        self.system.register_user(user)
        self.current_user = user
        messagebox.showinfo("Done", f"User '{name}' created")

    def book_ticket(self):
        if not self.current_user:
            messagebox.showerror("Error", "Create account first")
            return
        try:
            ticket_id = int(self.ticket_id_var.get())
        except:
            messagebox.showerror("Error", "Ticket ID must be a number")
            return
        payment_method = self.payment_method_var.get()
        ticket = self.system.book_ticket(self.current_user, ticket_id)
        if ticket:
            payment = Payment(1, payment_method, ticket.price)
            if payment.process():
                messagebox.showinfo("Success", f"Ticket '{ticket.ticket_type}' booked")
            else:
                messagebox.showerror("Fail", "Payment failed")
        else:
            messagebox.showerror("Error", "Ticket not found or sold")

    def show_admin(self):
        dash = AdminDashboard(self.system)
        dash.show_ticket_stats()

#Run GUI

root = tk.Tk()
app = TicketApp(root)
root.mainloop()
